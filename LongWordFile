# LongWordFile Program

üìÑ **Description**:  
This Java program reads a file provided by the user and identifies the **longest word** in the file. It incorporates robust error handling and ensures resources are properly closed after use.

---

## üõ†Ô∏è **How It Works**
1. The program prompts the user to enter the file path.
2. It validates whether the provided path points to a valid file.
3. Reads the file word by word.
4. Compares the length of each word to find the **longest word**.
5. Displays the longest word to the user.

---

## üìÇ **Structure**
### **Class**:  
- `LongWordFile`: Contains the main logic.

### **Methods**:
1. `main(String[] args)`:
   - Entry point that calls the `findLongestWords()` method.
   - Handles exceptions during file reading.

2. `findLongestWords()`:
   - Reads the file, processes it, and finds the longest word.
   - Handles user input and resource management.

### **Variables**:
- `iScan`: Scanner for user input.
- `filePath`: Stores the file path entered by the user.
- `file`: Represents the file object.
- `longestWord`: Tracks the longest word found in the file.
- `currentWord`: Temporarily holds the current word being read.
- `fScan`: Scanner for reading the file.

---

## üöÄ **How to Run**
1. Compile the program:
   ```bash
   javac LongWordFile.java
   ```
2. Run the program:
   ```bash
   java LongWordFile
   ```
3. Enter the file path when prompted:
   ```
   Enter the file path: /path/to/your/file.txt
   ```

---

## üõ°Ô∏è **Error Handling**
- If the file is not found or the path is invalid, the program displays a user-friendly error message:
  ```
  Error: File not found. Please ensure the file path is correct.
  ```

---

## üìã **Example Input/Output**
### Input:
```
Enter the file path: /home/user/documents/test.txt
```

### File Contents:
```txt
Java is a wonderful programming language!
```

### Output:
```
The longest word in the file is: programming
```

---

## ‚ú® **Features**
- Dynamic file path input.
- Handles missing or invalid files gracefully.
- Closes all resources properly after use.
- Simple and user-friendly.

---

## üìÇ **File Example**
Create a sample text file (e.g., `test.txt`) with some content to test the program:
```txt
This program is designed to find the longest word in this file.
```

---

## üñ•Ô∏è **System Requirements**
- Java Development Kit (JDK) 8 or higher.
- Any operating system with Java installed.

##Code
import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;

public class LongWordFile {
    public static void main(String[] args) {
        try {
            new LongWordFile().findLongestWords();
        } catch (FileNotFoundException e) {
            System.out.println("Error: File not found. Please ensure the file path is correct.");
        }
    }

    public void findLongestWords() throws FileNotFoundException {
        Scanner iScan = new Scanner(System.in);
        System.out.print("Enter the file path: ");
        String filePath = iScan.nextLine();

        File file = new File(filePath);
        if (!file.exists() || !file.isFile()) {
            System.out.println("The specified path is not a valid file. Please try again.");
            iScan.close();
            return;
        }

        String longestWord = "";
        String currentWord;
        Scanner fScan = new Scanner(file);

        while (fScan.hasNext()) {
            currentWord = fScan.next();
            if (currentWord.length() > longestWord.length()) {
                longestWord = currentWord;
            }
        }

        System.out.println("\nThe longest word in the file is: " + longestWord);
        fScan.close();
        iScan.close();
    }
}


---

This optimized version improves readability and ensures the logic is easy to follow.
üõ†Ô∏è How to Use Clone this repo

git clone https://github.com/Warlord27/JavaProb.git Navigate and open any .java file

Compile & run with your favorite Java IDE or CLI

‚≠ê Contributions Welcome! Got a cool Java problem? Found a bug? Feel free to fork, improve, or suggest! üôå

Made with ‚òï and ‚ù§Ô∏è by Adam Warlord
